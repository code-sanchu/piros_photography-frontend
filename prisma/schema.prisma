generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  DELETED_BY_USER
  BANNED_BY_MODERATOR
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  role               Role                @default(USER)
  accounts           Account[]
  sessions           Session[]
  status             UserStatus          @default(ACTIVE)
  albumImageComments AlbumImageComment[]
  banReason          String?
  banDate            DateTime?
}

model Admin {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  googleEmail String   @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  index        Int
  title        String?
  published    Boolean      @default(false)
  coverImageId String?
  description  String?
  coverImage   Image?       @relation(fields: [coverImageId], references: [id])
  images       AlbumImage[]
}

model AlbumImage {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  title       String?
  description String?
  imageId     String
  albumId     String
  index       Int
  album       Album               @relation(fields: [albumId], references: [id])
  image       Image               @relation(fields: [imageId], references: [id])
  comments    AlbumImageComment[]
}

enum AlbumImageCommentStatusTypes {
  ACTIVE
  DELETED_BY_USER
  BLOCKED_BY_MODERATOR
}

model AlbumImageCommentStatus {
  id          String                       @id @default(cuid())
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  status      AlbumImageCommentStatusTypes @default(ACTIVE)
  blockReason String?
}

model AlbumImageComment {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  text         String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  albumImage   AlbumImage @relation(fields: [albumImageId], references: [id])
  albumImageId String
}

model ImageTag {
  id     String  @id @default(cuid())
  text   String  @unique
  images Image[] @relation("ImageToImageTag")
}

model Image {
  id                   String       @id @default(cuid())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  cloudinary_public_id String
  naturalHeight        Int          @map("height")
  naturalWidth         Int          @map("width")
  albumCoverImages     Album[]
  albumImages          AlbumImage[]
  tags                 ImageTag[]   @relation("ImageToImageTag")
}

model YoutubeVideo {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String?
  description    String?
  index          Int
  youtubeVideoId String
}

model AboutPage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String

  @@map("AboutText")
}
